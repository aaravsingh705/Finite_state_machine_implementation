module seq_101010_detector (
  input x,
  input clk,
  input reset,
  output reg z
);
  // Define states
  parameter S0=3'd0, S1=3'd1, S2=3'd2, S3=3'd3, S4=3'd4, S5=3'd5;

  reg [2:0] PS, NS;

  // State transition on clock or reset
  always @(posedge clk or posedge reset) begin
    if (reset)
      PS <= S0;
    else
      PS <= NS;
  end

  // Next state logic and output z
  always @(PS or x) begin
    z = 0;
    case (PS)
      S0: begin
        NS = (x == 1) ? S1 : S0;
      end
      S1: begin
        NS = (x == 0) ? S2 : S1;
      end
      S2: begin
        NS = (x == 1) ? S3 : S0;
      end
      S3: begin
        NS = (x == 0) ? S4 : S1;
      end
      S4: begin
        NS = (x == 1) ? S5 : S0;
      end
      S5: begin
        if (x == 0) begin
          z = 1;         // Detected 101010
          NS = S4;       // Overlapping: last 4 bits are 1010 â†’ go to S4
        end else begin
          z = 0;
          NS = S1;       // Got '1' again, start a new potential sequence
        end
      end
      default: NS = S0;
    endcase
  end

endmodule
