`timescale 1ns / 1ps

module Traffic_Light_Controller (
    input clk, rst,
    output reg [2:0] light_M1,   // Main Road 1
    output reg [2:0] light_S,    // Side Road
    output reg [2:0] light_MT,   // Main Turning
    output reg [2:0] light_M2    // Main Road 2
);

    // State encoding
    parameter S1 = 0, S2 = 1, S3 = 2, S4 = 3, S5 = 4, S6 = 5;

    // State and timer
    reg [2:0] ps;     // Present state
    reg [3:0] count;  // Timer counter

    // Duration constants
    parameter sec7 = 7, sec5 = 5, sec2 = 2, sec3 = 3;

    // State transition logic (Moore FSM + timer)
    always @(posedge clk or posedge rst)
    begin
        if (rst)
        begin
            ps <= S1;
            count <= 0;
        end
        else
        begin
            case (ps)
                S1:
                begin
                    if (count < sec7)
                    begin
                        count <= count + 1;
                    end
                    else
                    begin
                        ps <= S2;
                        count <= 0;
                    end
                end

                S2:
                begin
                    if (count < sec2)
                    begin
                        count <= count + 1;
                    end
                    else
                    begin
                        ps <= S3;
                        count <= 0;
                    end
                end

                S3:
                begin
                    if (count < sec5)
                    begin
                        count <= count + 1;
                    end
                    else
                    begin
                        ps <= S4;
                        count <= 0;
                    end
                end

                S4:
                begin
                    if (count < sec2)
                    begin
                        count <= count + 1;
                    end
                    else
                    begin
                        ps <= S5;
                        count <= 0;
                    end
                end

                S5:
                begin
                    if (count < sec3)
                    begin
                        count <= count + 1;
                    end
                    else
                    begin
                        ps <= S6;
                        count <= 0;
                    end
                end

                S6:
                begin
                    if (count < sec2)
                    begin
                        count <= count + 1;
                    end
                    else
                    begin
                        ps <= S1;
                        count <= 0;
                    end
                end

                default:
                begin
                    ps <= S1;
                    count <= 0;
                end
            endcase
        end
    end

    // Output logic based on present state
    always @(ps)
    begin
        case (ps)
            S1:
            begin
                light_M1 <= 3'b001;  // Green
                light_M2 <= 3'b001;  // Green
                light_MT <= 3'b100;  // Red
                light_S  <= 3'b100;  // Red
            end

            S2:
            begin
                light_M1 <= 3'b001;  // Green
                light_M2 <= 3'b010;  // Yellow
                light_MT <= 3'b100;  // Red
                light_S  <= 3'b100;  // Red
            end

            S3:
            begin
                light_M1 <= 3'b001;  // Green
                light_M2 <= 3'b100;  // Red
                light_MT <= 3'b001;  // Green
                light_S  <= 3'b100;  // Red
            end

            S4:
            begin
                light_M1 <= 3'b010;  // Yellow
                light_M2 <= 3'b100;  // Red
                light_MT <= 3'b010;  // Yellow
                light_S  <= 3'b100;  // Red
            end

            S5:
            begin
                light_M1 <= 3'b100;  // Red
                light_M2 <= 3'b100;  // Red
                light_MT <= 3'b100;  // Red
                light_S  <= 3'b001;  // Green
            end

            S6:
            begin
                light_M1 <= 3'b100;  // Red
                light_M2 <= 3'b100;  // Red
                light_MT <= 3'b100;  // Red
                light_S  <= 3'b010;  // Yellow
            end

            default:
            begin
                light_M1 <= 3'b000;
                light_M2 <= 3'b000;
                light_MT <= 3'b000;
                light_S  <= 3'b000;
            end
        endcase
    end

endmodule
